<project name="webwork" default="jar" basedir=".">

    <path id="cp">
        <fileset dir="lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <property file="build.properties"/>
    <property file="release.properties"/>
    <property file="ivyrep.properties"/>

    <property name="lib" value="lib"/>
    <property name="lib.core" value="${lib}/core"/>
    <property name="lib.build" value="${lib}/build"/>
    <property name="lib.optional" value="${lib}/optional"/>
    <property name="lib.example" value="${lib}/example"/>

    <property name="src" value="src"/>
    <property name="src.java" value="${src}/java"/>
    <property name="src.test" value="${src}/test"/>
    <property name="src.example" value="${src}/example"/>
    <property name="src.webapp" value="${src}/webapp"/>
    <property name="src.etc" value="${src}/etc"/>

    <property name="build" value="build"/>
    <property name="build.test" value="${build}/test"/>
    <property name="build.java-test" value="${build}/java-test"/>
    <property name="build.java" value="${build}/java"/>
    <property name="build.example" value="${build}/example"/>
    <property name="build.example.jars" value="${build}/example-jars"/>
    <property name="build.example-war" value="${build}/example-war"/>
    <property name="build.clover" value="${build}/clover"/>
    <property name="build.dist" value="${build}/dist"/>
    <property name="build.webwork.tld" value="${src.webapp}/WEB-INF/webwork.tld"/>

    <property name="demo.keystore.password" value="webwork"/>
    <property name="demo.keystore" value="${src.etc}/security/demoKeystore"/>

    <property name="docs" value="docs"/>

    <target name="clean">
        <delete dir="${build}"/>
        <delete file="${build.webwork.tld}"/>
    </target>

    <target name="java">
        <mkdir dir="${build.java}"/>
        <javac srcdir="${src.java}" destdir="${build.java}" classpathref="cp" debug="on"/>
        <copy filtering="no" todir="${build.java}">
            <fileset dir="${src.java}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>
    </target>

    <target name="test" depends="java">
        <taskdef resource="clovertasks"/>
        <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>

        <mkdir dir="${build.clover}"/>
        <clover-setup initString="${build.clover}/coverage.db">
            <files>
                <exclude name="src/example/**/*.java"/>
                <exclude name="src/test/**/*.java"/>
            </files>
        </clover-setup>

        <mkdir dir="${build.test}"/>
        <javac srcdir="${src.test}" destdir="${build.test}" classpath="${build.java}" classpathref="cp" debug="on"/>
        <copy filtering="no" todir="${build.test}">
            <fileset dir="${src.test}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>

        <mkdir dir="${build.java-test}"/>
        <javac srcdir="${src.java}" destdir="${build.java-test}" classpathref="cp" debug="on"/>
        <copy filtering="no" todir="${build.java-test}">
            <fileset dir="${src.java}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>

        <mkdir dir="${build.dist}/docs/junit"/>
        <junit printsummary="yes" haltonfailure="yes" haltonerror="yes" fork="yes">
            <jvmarg value="-Djava.awt.headless=true"/>
            <classpath>
                <pathelement location="${build.test}"/>
                <pathelement location="${build.java-test}"/>
                <pathelement location="${src.etc}/test"/>
                <pathelement location="${src.etc}"/>
                <path refid="cp"/>
            </classpath>

            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <batchtest todir="${build.dist}/docs/junit">
                <fileset dir="${src.test}">
                    <exclude name="**/Abstract*.java"/>
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="jar" depends="java">
        <mkdir dir="${build}"/>

        <mkdir dir="${build.java}/META-INF"/>
        <copy file="${src.webapp}/WEB-INF/taglib.tld" todir="${build.java}/META-INF"/>

        <jar basedir="${build.java}" jarfile="${build}/${name}-${version}.jar">
            <manifest>
                <attribute name="Main-Class" value="com.opensymphony.webwork.webFlow.WebFlow"/>
                <attribute name="Implementation-Title" value="${fullname}" />
                <attribute name="Implementation-Version" value="${version}" />
            </manifest>
        </jar>
        <jar basedir="${src.java}" jarfile="${build}/${name}-${version}-src.jar">
            <manifest>
                <attribute name="Implementation-Title" value="${fullname}" />
                <attribute name="Implementation-Version" value="${version}" />
            </manifest>
        </jar>
        
    </target>

    <target name="example-jar" depends="java, jar">
        <mkdir dir="${build.example}"/>
        <javac srcdir="${src.example}" destdir="${build.example}" classpath="${build.java}" classpathref="cp" debug="on"/>
        <copy filtering="no" todir="${build.example}">
            <fileset dir="${src.example}">
                <exclude name="**/*.java"/>
                <exclude name="**/package.html"/>
            </fileset>
        </copy>
    </target>

    <target name="signjar" depends="example-jar">
        <!-- Copy the jars for the client before signing them - we don't want the server jars signed -->
        <mkdir dir="${build.example.jars}"/>
        <copy todir="${build.example.jars}">
            <fileset dir="${lib.core}">
                <include name="cglib-full-2.0.2.jar"/>
                <include name="commons-logging.jar"/>
                <include name="ognl.jar"/>
                <include name="oscore.jar"/>
                <include name="xwork.jar"/>
            </fileset>
            <fileset file="${build}/${name}-${version}.jar"/>
            <fileset file="${lib.build}/servlet.jar"/>
            <fileset dir="${lib.optional}">
                <include name="object-dispatcher.jar"/>
                <include name="commons-digester.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-beanutils.jar"/>
                <include name="log4j-1.2.8.jar"/>
            </fileset>
        </copy>
        <signjar
            keystore="${demo.keystore}" alias="demo"
            storepass="${demo.keystore.password}"
            verbose="false"
            >
            <fileset dir="${build.example.jars}">
                <include name="cglib-full-2.0.2.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-digester.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-beanutils.jar"/>
                <include name="ognl.jar"/>
                <include name="oscore.jar"/>
                <include name="xwork.jar"/>
                <include name="${name}-${version}.jar"/>
                <include name="example-client.jar"/>
                <include name="servlet.jar"/>
                <include name="object-dispatcher.jar"/>
                <include name="log4j-1.2.8.jar"/>
            </fileset>
        </signjar>
    </target>

    <target name="example-war" depends="signjar">

        <war destfile="${build}/${name}-example.war" webxml="${src.webapp}/WEB-INF/web.xml">
            <fileset dir="${src.webapp}">
                <exclude name="**/web.xml"/>
            </fileset>
            <fileset dir="${build.example.jars}">
                <include name="cglib-full-2.0.2.jar"/>
                <include name="commons-logging.jar"/>
                <include name="commons-digester.jar"/>
                <include name="commons-collections.jar"/>
                <include name="commons-beanutils.jar"/>
                <include name="ognl.jar"/>
                <include name="oscore.jar"/>
                <include name="xwork.jar"/>
                <include name="${name}-${version}.jar"/>
                <include name="servlet.jar"/>
                <include name="object-dispatcher.jar"/>
                <include name="log4j-1.2.8.jar"/>
            </fileset>
            <lib dir="${lib.core}"/>
            <lib dir="${lib.optional}"/>
            <lib dir="${lib.example}"/>
            <lib file="${build}/${name}-${version}.jar"/>
            <webinf file="${build}/webwork.tld"/>
            <classes dir="${build.example}"/>
        </war>
    </target>

    <target name="javadocs">
        <mkdir dir="${build.dist}/docs/api"/>
        <javadoc sourcepath="${src.java}"
            destdir="${build.dist}/docs/api"
            packagenames="com.opensymphony.*"
            classpathref="cp"
            author="true"
            version="true"
            overview="${src.java}/overview.html"
            windowTitle="${fullname} API - ${version}"
            doctitle="${fullname} API (${version})"
            footer="&lt;a href=&quot;http://www.opensymphony.com/webwork&quot; target=&quot;_top&quot;&gt;WebWork Project Page&lt;/a&gt;"
            use="true"
            verbose="false">
            <link href="http://java.sun.com/j2se/1.3/docs/api/"/>
            <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
        </javadoc>
        <!-- <copy overwrite="yes" file="${docs}/main.css" tofile="${docs}/api/stylesheet.css"/> -->
    </target>

    <target name="clover.report" depends="test">
        <clover-report>
            <current outfile="${build.dist}/docs/clover">
                <format type="html"/>
            </current>
        </clover-report>
    </target>

    <target name="clover.historical" depends="clover.report">
        <clover-historypoint historyDir="${build.clover}"/>

        <clover-report>
            <historical outfile="${build.dist}/docs/clover" historyDir="${build.clover}">
                <format type="html"/>
            </historical>
        </clover-report>
    </target>

    <target name="junit.report" depends="test">
        <junitreport todir="${build.dist}/docs/junit">
            <fileset dir="${build.dist}/docs/junit">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dist}/docs/junit"/>
        </junitreport>
    </target>

    <target name="docs.impl">
        <copy todir="${build.dist}/docs">
            <fileset dir="${docs}"/>
        </copy>
    </target>

    <target name="docs" depends="javadocs, clover.report, junit.report, docs.impl">
    </target>

    <target name="dist" depends="jar, example-war, docs">
        <copy file="${build}/${name}-${version}.jar" todir="${build.dist}"/>
        <copy file="${build}/${name}-example.war" todir="${build.dist}"/>
        <copy todir="${build.dist}/src">
            <fileset dir="${src}"/>
        </copy>

        <mkdir dir="${build.dist}/lib"/>
        <copy todir="${build.dist}/lib">
            <fileset dir="${lib}"/>
        </copy>

        <copy todir="${build.dist}">
            <fileset dir="${basedir}">
                <include name="build.*"/>
            </fileset>
        </copy>

        <zip zipfile="${build}/${name}-${version}.zip" basedir="${build.dist}">
            <exclude name="docs/clover/**/*"/>
            <exclude name="docs/junit/**/*"/>
        </zip>
    </target>

    <target name="release">
        <!-- update the navpanel.jsp to include the download link -->
        <filter token="DOWNLOAD" value="${latest.download}"/>
        <filter token="DOWNLOAD_JAR" value="${latest.download.jar}"/>
        <copy tofile="${docs}/navpanel.jsp" file="${docs}/navpanel-source.jsp" filtering="yes" overwrite="yes"/>

        <cvs command="commit -m '${name} ${version} release' ${docs}/navpanel.jsp"/>
        <cvs command="tag -F ${cvs.tag}"/>

        <!-- update the website -->
        <sshexec host="www.opensymphony.com"
            username="${website.username}"
            password="${website.password}"
            trust="yes"
            command="cd /opt/j2ee/opensymphony/${name};export JAVA_HOME='/usr/java/jdk';cvs update -P -d;/usr/java/ant-1.5.4/bin/ant docs;"/>


        <!-- update the ibiblio repository -->
        <scp password="${ibiblio.password}"
            trust="yes"
            todir="${ibiblio.username}@opensymphony.formicary.net:/home/rsync/repository/opensymphony/jars"
            file="${build}/${name}-${version}.jar"/>
    </target>

    <target name="website" depends="javadocs, docs.impl">
    </target>

    <target name="ivyrep" depends="jar">
        <tstamp>
          <format property="TIME" pattern="yyyyddMMHHmmss"/>
        </tstamp>

        <!-- delete the old timestamped builds and commit -->
        <exec executable="svn">
            <arg value="delete"/>
            <arg value="${ivyrep.path}/opensymphony/${name}/${name}-${version}-*.jar"/>
        </exec>

        <!-- copy over the new build and check it in -->
        <copy file="${build}/${name}-${version}.jar" tofile="${ivyrep.path}/opensymphony/${name}/${name}-${version}-${TIME}.jar"/>
        <exec executable="svn">
            <arg value="add"/>
            <arg value="${ivyrep.path}/opensymphony/${name}/${name}-${version}-${TIME}.jar"/>
        </exec>
        <exec executable="svn">
            <arg value="commit"/>
            <arg value="--username"/>
            <arg value="${ivyrep.username}"/>
            <arg value="--password"/>
            <arg value="${ivyrep.password}"/>
            <arg value="--non-interactive"/>
            <arg value="-m"/>
            <arg value="automatic commit"/>
            <arg value="${ivyrep.path}/opensymphony/${name}"/>
        </exec>
    </target>

	<target name='dojo-profile'>

		<ant dir="../dojo/buildscripts" target="release" inheritall="false">
			<property name="docless" value="true"/>
			<property name="nostrip" value="true"/>
			<property name="profileFile" value="../../webwork/dojo.profile.js"/>
		</ant>

		<sync todir="${src.java}/com/opensymphony/webwork/static/dojo/src" includeEmptyDirs="no" verbose="yes">
			<fileset dir="../dojo/release/dojo/src">
				<exclude name="**/*.js"/>
				<exclude name="Makefile"/>
				<exclude name="README.TXT"/>
			</fileset>
		</sync>

		<copy todir="${src.java}/com/opensymphony/webwork/static/dojo" preservelastmodified="true">
			<fileset dir="../dojo/release/dojo">
				<exclude name="src/**"/>
			</fileset>
		</copy>
	</target>
</project>
