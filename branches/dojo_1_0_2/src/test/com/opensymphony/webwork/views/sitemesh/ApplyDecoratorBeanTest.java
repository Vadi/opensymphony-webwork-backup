/*
 * Copyright (c) 2002-2006 by OpenSymphony
 * All rights reserved.
 */
package com.opensymphony.webwork.views.sitemesh;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.easymock.MockControl;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockServletConfig;
import org.springframework.mock.web.MockServletContext;

import com.opensymphony.module.sitemesh.Decorator;
import com.opensymphony.module.sitemesh.DecoratorMapper;
import com.opensymphony.module.sitemesh.Factory;
import com.opensymphony.module.sitemesh.Page;
import com.opensymphony.module.sitemesh.PageParser;
import com.opensymphony.webwork.views.JspSupportServlet;
import com.opensymphony.xwork.ActionContext;
import com.opensymphony.xwork.ActionInvocation;
import com.opensymphony.xwork.XWorkTestCase;
import com.opensymphony.xwork.util.OgnlValueStack;

import freemarker.template.ObjectWrapper;
import freemarker.template.SimpleHash;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateNodeModel;

/**
 * @author tmjee
 * @version $Date$ $Id$
 */
public class ApplyDecoratorBeanTest extends XWorkTestCase {
	
	private ServletConfig servletConfig;
	private ServletContext servletContext;
	private MockControl actionInvocationControl;
	private ActionInvocation invocation;
	private HttpServletRequest request;
	private HttpServletResponse response;
	private StringWriter writer;
	private OgnlValueStack stack;
	
	private MockPage page;
	private MockDecorator decorator;
	private MockFactory factory;
	private MockControl pageParserControl;
	private PageParser pageParser;
	private MockControl decoratorMapperControl;
	private DecoratorMapper decoratorMapper;
	
	private SimpleHash model;
	
	private ApplyDecoratorBean bean;
	
	private boolean processed = false;
	
	/**
	 * A simple test case that test when teh applydecorator tag is used with
	 * name and page attribute, of which name is to be the name of the decorator 
	 * while page is the page to be decorated.
	 * 
	 * <p/>
	 * 
	 * It basically just test that if we get a sitemesh Page object it's properties eg.
	 * head, title, body, page.properties etc. is put into the freemarker model
	 * generated by FreemarkerManager, before the Freemarker template is processed.
	 * 
	 * <p/>
	 * 
	 * It doesn't test methods hook like 
	 * <ul>
	 * 	<li>getFreemarkerTemplate</li>
	 * 	<li>parsePageFromContent</li>
	 * 	<li>parsePageFromAbsoluteUrl</li>
	 * 	<li>parsePageFromRelativeUrlPath</li>
	 * 	<li>getSitemeshFactory</li>
	 * 	<li>getPageParser</li>
	 * 	<li>getDecoratorMapper</li>
	 * 	<li>deduceLocale</li>
	 * 	<li>createModel</li>
	 * </ul>
	 * 
	 *  cause they belongs to Sitemesh and FreemarkerManager, not really
	 *  related to ApplyDecoratorBean.
	 * 
	 * @throws Exception
	 */
	public void testApplyDecorator() throws Exception {
		
		assertFalse(processed);
		
		page.setTitle("someTitle");
		page.setBody("someBody");
		page.setHead("someHead");
		
		bean.setPage("somePageToBeDecorated.ftl");
		bean.setName("someDecoratorName");
		bean.start(writer);
		bean.end(writer, "");
		
		actionInvocationControl.verify();
		pageParserControl.verify();
		decoratorMapperControl.verify();
		
		assertTrue(processed);
		assertNotNull(model);
		assertNotNull(model.get("page"));
		assertNotNull(model.get("title"));
		assertNotNull(model.get("body"));
		assertNotNull(model.get("page.properties"));
	}
	
	

	protected void setUp() throws Exception {
		super.setUp();
		
		writer = new StringWriter();
		
		servletContext = new MockServletContext();
		servletConfig = new MockServletConfig(servletContext);
		
		JspSupportServlet.jspSupportServlet = new JspSupportServlet();
		JspSupportServlet.jspSupportServlet.init(servletConfig);
		
		actionInvocationControl = MockControl.createControl(ActionInvocation.class);
		invocation = (ActionInvocation) actionInvocationControl.getMock();
		actionInvocationControl.replay();
		
		request = new MockHttpServletRequest();
		response = new MockHttpServletResponse();
		stack = ActionContext.getContext().getValueStack();
		
		
		
		page = new MockPage();
		decorator = new MockDecorator();
		factory = new MockFactory();
		
		pageParserControl = MockControl.createControl(PageParser.class);
		pageParser = (PageParser) pageParserControl.getMock();
		pageParserControl.replay();
		
		decoratorMapperControl = MockControl.createControl(DecoratorMapper.class);
		decoratorMapper = (DecoratorMapper) decoratorMapperControl.getMock();
		decoratorMapperControl.replay();
		
		factory.setPageParser(pageParser);
		factory.setDecoratorMapper(decoratorMapper);
		
		model = new SimpleHash();
		
		bean = new ApplyDecoratorBean(stack, request, response) {
			protected Factory getSitemeshFactory() {
				return factory;
			}
			
			protected Page parsePageObjectFromRelativeUrlPath(String relativeUrl) throws TemplateException, IOException {
				return page;
			}
			
			protected Decorator getDecorator(HttpServletRequest request, String decoratorName) {
				return decorator;
			}
			
			protected SimpleHash createModel() throws TemplateException {
				return model;
			}
			
			protected Template getFreemarkerTemplate(String templatePath) throws IOException, TemplateException {
				StringReader reader = new StringReader("");
				return new Template("", reader) {
					public void process(Object arg0, Writer arg1) throws TemplateException, IOException {
						processed = true;
					}
					public void process(Object arg0, Writer arg1, ObjectWrapper arg2) throws TemplateException, IOException {
						processed = true;
					}
					public void process(Object arg0, Writer arg1, ObjectWrapper arg2, TemplateNodeModel arg3) throws TemplateException, IOException {
						processed = true;
					}
				};
			}
		};
	}
	
	protected void tearDown() throws Exception {
		super.tearDown();
		
		servletContext = null;
		servletConfig = null;
		request = null;
		response = null;
		invocation = null;
		writer = null;
		stack = null;
		bean = null;
		page = null;
		decorator = null;
		model = null;
		factory= null;
		pageParser = null;
		decoratorMapper = null;
		processed = false;
	}
	
}
